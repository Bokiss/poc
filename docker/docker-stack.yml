version: "3.8"

services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "6379:6379"
    configs:
      - source: redis-master-conf
        target: /usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - all

  redis-slave:
    image: redis:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    configs:
      - source: redis-slave-conf
        target: /usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    depends_on:
      - redis
    networks:
      - all

  vote:
    image: dockersamples/examplevotingapp_vote:before
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "5000:80"
    networks:
      - all

  db:
    image: postgres:9.4
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - all
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - all
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - all
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  grafana:
    image: grafana/grafana-enterprise
    networks:
      - all
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.id==uicxt8qjqygevq6we5jeg2a11
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - influx

  influx:
    image: influxdb:latest
    environment:
      - INFLUXDB_DB=influx
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    networks:
      - all
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.id==uicxt8qjqygevq6we5jeg2a11
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb

  telegraf:
    image: telegraf
    networks:
      - all
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    depends_on:
      - influx
    ports:
      - "8125:8125"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: telegraf-conf2
        target: /etc/telegraf/telegraf.conf

networks:
  all:
    driver: overlay

configs:
  redis-master-conf:
    file: ./redis-master.conf
  redis-slave-conf:
    file: ./redis-slave.conf
  telegraf-conf2:
    file: ./telegraf.conf

volumes:
  db-data:
  grafana_data:
    external: true
  influxdb_data:
    external: true
